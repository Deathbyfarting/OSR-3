startFile


--"800 6 700"-x y z
validGates = {"+1a2a3a4a5a6a7a80","+1b2b3b4b5b6b7b8b","end"}
path = {"495 23 261","518 21 256","end"}
symbol={"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","end"}

--sender
DHD = function()
os.loadAPI("/bios/API")
rednet.open("top")
isDone = false
address = "+"
shevron = {0}

symbPosX={18,23,28,33,38,43,48,18,23,28,33,38,43,48,18,23,28,33,38,43,48,18,23,28,33,38,43,48,18,23,28,33,38,43,48,33}
symbPosY={3,3,3,3,3,3,3,6,6,6,6,6,6,6,9,9,9,9,9,9,9,12,12,12,12,12,12,12,15,15,15,15,15,15,15,18}

setSymbols = function()
term.setBackgroundColor(colors.black)
term.clear()
for i = 1, #symbPosX  do
term.setCursorPos(symbPosX[i],symbPosY[i])
term.setBackgroundColor(colors.gray)
print("   ")
term.setCursorPos(symbPosX[i],symbPosY[i]-1)
print(" "..symbol[i].." ") end
--panel
for i = 1, 15 do paintutils.drawLine(0+i,1,0+i,19,colors.lightGray) end
--center button

term.setBackgroundColor(colors.gray)
term.setCursorPos(3,17)
print("          ")
term.setCursorPos(3,18)
print("          ")
term.setBackgroundColor(colors.red)
term.setCursorPos(4,17)
print("        ")

--current address
term.setBackgroundColor(colors.black)
term.setCursorPos(5,3)
print("Address")

--most resent symbol
term.setBackgroundColor(colors.black)
term.setCursorPos(5,10)
print("Actived")
for i = 1, 3 do
paintutils.drawLine(6,10+i,10,10+i,colors.black) end

--version
term.setBackgroundColor(colors.lightGray)
term.setCursorPos(1,1)
print("OSR-Gate")
end

setSymbols()
while true do
local event,button,mouseX,mouseY = os.pullEvent()
mouseX = API.nilCheck(mouseX)
mouseY = API.nilCheck(mouseY)
button = API.nilCheck(button)

--print(mouseY)
--print(mouseX)

for i=1, 36 do
if API.isOn(symbPosX[i],symbPosY[i]-1,symbPosX[i]+3,symbPosY[i]+1,mouseX,mouseY) and not isDone then
term.setBackgroundColor(colors.orange)
term.setCursorPos(symbPosX[i],symbPosY[i])
print("   ")
table.insert(shevron, 1, symbol[i]) 
--activation
term.setBackgroundColor(colors.black)
term.setCursorPos(8,12)
print(symbol[i]) end
end

--center button
if API.isOn(3,17,12,18,mouseX,mouseY) then
term.setBackgroundColor(colors.gray)
term.setCursorPos(3,17)
print("          ")
term.setCursorPos(3,18)
print("          ")
term.setBackgroundColor(colors.orange)
term.setCursorPos(4,17)
print("        ")
sleep(1)
if shevron[8] ~= nil then
for i = 1, 8 do
address = address..i..shevron[i]
end
rednet.broadcast(address)
id,done,dis = rednet.receive(300)
if done == "DHDdone" then end
end--shev
setSymbols()
shevron = {0}
address = "+"
isDone = false
end

if event == "key" and button == 0 then break end

if redstone.getInput("back") then
term.setBackgroundColor(colors.red)
term.setCursorPos(2,16)
print("over Clocked")
if shevron[9] ~= nil then 
isDone = true
end
else
if shevron[8] ~= nil then 
isDone = true
end
end

--print address
paintutils.drawLine(1,4,10,4,colors.lightGray)
printadd=shevron[1]
for i=2, #shevron do printadd = printadd.." "..shevron[i] end
length = string.len(printadd)
length=length/2
term.setCursorPos(10-length,4)
printadd = string.reverse(printadd)
printadd=string.gsub (printadd,"0","")
printadd=string.gsub(printadd," ","",1)
term.setBackgroundColor(colors.black)
print(printadd)

end--while
term.setBackgroundColor(colors.black)
term.setCursorPos(1,1)
term.clear()
os.unloadAPI("API")
end--func DHD

--receiver
GateControl = function(tele)
local Gate=peripheral.wrap("back")
rednet.open("bottom")

while true do
if redstone.getInput("right") then redstone.setOutput("right",false) end
if redstone.getInput("left") then redstone.setOutput("left",false) end
defalt = "tp @p "

print(">")
id,memory,dis = rednet.receive()
redstone.getInput("top")
print(memory)
for i=1, #validGates do
if memory == validGates[i] then 
gateAddress =defalt..path[i]

local X = 0
while not redstone.getInput("top") do
redstone.setOutput("left",true)
redstone.setOutput("right",true)
X = X + 1
if X == 30000 then
break end
sleep(1)
end--while open

break end
end
if redstone.getInput("top") then Gate.setCommand(gateAddress) end
rednet.broadcast("DHDdone")
end--while
end--gate control



endFile
